// Set when building only part of the abis in the apk.
def abiFiltersForWrapScript = []
def supportAbis = [["arm64-v8a", 'aarch64'], ['x86', 'i686']]
android {
    buildTypes {
        profiling {
            initWith debug
            externalNativeBuild {
                cmake {
                    cppFlags "-fsanitize=address -fno-omit-frame-pointer"
                    // cmake Debug build type uses -O0, which makes the code slow.
                    //arguments "-DCMAKE_BUILD_TYPE=Release"
                }
            }
            packagingOptions {
                // Contain debug info in the libraries.
                doNotStrip "**.so"
                // Exclude wrap.sh for architectures not built.
                if (abiFiltersForWrapScript) {
                    def exclude_abis = ["armeabi", "armeabi-v7a", "arm64-v8a",
                                        "x86", "x86_64", "mips", "mips64"]
                            .findAll{ !(it in abiFiltersForWrapScript) }
                            .collect{ "**/" + it + "/wrap.sh" }
                    excludes += exclude_abis
                }
            }
            // Add lib/xxx/wrap.sh in the apk. This is to enable java profiling on Android O
            // devices.
            sourceSets {
                profiling {
                    resources {
                        srcDir {
                            "profiling_apk_add_dir"
                        }
                    }
                }
            }
        }
    }
}

def writeWrapScriptToFullyCompileJavaApp(wrapFile, arch) {
    wrapFile.withWriter { writer ->
        writer.write("#!/system/bin/sh\n")
        writer.write("HERE=\"\$(cd \"\$(dirname \"\$0\")\" && pwd)\"\n")
        writer.write("export ASAN_OPTIONS=log_to_syslog=false,allow_user_segv_handler=1\n")
        writer.write("export LD_PRELOAD=\$HERE/libclang_rt.asan-$arch-android.so\n")
        writer.write("\$@")
    }
}

task createProfilingApkAddDir {
    for (String[] abi : supportAbis) {
        def dir = new File("app/profiling_apk_add_dir/lib/" + abi[0])
        dir.mkdirs()
        def wrapFile = new File(dir, "wrap.sh")
        writeWrapScriptToFullyCompileJavaApp(wrapFile, abi[1])
        println "write file " + wrapFile.path
    }
}

Copy createCopyASanLibTask(abi, arch){
    def taskName = "copy$arch"
    def copyASan = tasks.findByName(taskName)
    if(copyASan != null){
        return copyASan
    }
    def libDir = new File(android.ndkDirectory, 'toolchains/llvm/prebuilt')
    FileTree files = fileTree(dir: libDir).include("**/libclang_rt.asan-$arch-android.so")
    copyASan = project.tasks.create(taskName, Copy)
    copyASan.from(files.last())
    copyASan.into(new File(android.sourceSets.main.jniLibs.srcDirs.first(), abi))
    return copyASan
}

tasks.whenTaskAdded { task ->
    if(task.name.startsWith('generate')) {
        for (String[] abi : supportAbis) {
            task.dependsOn createCopyASanLibTask(abi[0], abi[1])
        }
    }
}